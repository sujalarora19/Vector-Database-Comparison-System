web-scraper-order,web-scraper-start-url,linkes,linkes-href,text
"1720375813-1","https://docs.dhiwise.com/docs/flutter/social-authentication/","Sync or Download Code","https://docs.dhiwise.com/docs/flutter/download-code","Sync or Download Code[https://www.youtube.com/embed/XSjJVmSX8Ug]As you build your application, you will be redirected to the </> Code view screen, where you will find your generated app code or click on </> Code view on the top to visit the same.infoFlutter app code would be generated with the latest Flutter 3.7 version.Here, you can view the Version of displayed code, Application info, and Code type(which shows the chosen state management). Also, you can Download a single file or Copy to clipboard from the top right corner of the code view screen.It is recommended to check the README.md file, which consists of the following app information:App DetailsSDK VersionsPrerequisitesDependent librariesProject structureFont assets[https://www.youtube.com/embed/siIQAUWBbTY]
Download as a ZIP file​Download the application as a ZIP file into your system, and get your hands on it easily.Click on Sync or download code button at the bottom-right of the </> Code view screen. It will open a popup. Click on Download to download the ZIP file.Sync app code to IDEs​You can also sync the generated app code into your desired IDEs like Visual Studio Code, Android Studio or IntelliJ.Copy the application token, for the VS Code extension to fetch the code in VS Code.Use DhiWise Android Studio/IntelliJ plugin to sync the generated code into the respective IDEs. Learn more.Sync app code to GitHub​Connect DhiWise with your GitHub account and push the generated application code to your GitHub repository.Follow the steps below to integrate GitHub in DhiWise:Step 1: Select GitHub integration​You can integrate GitHub using two options:From Settings: From the Settings icon select Integrations under Application settings, and click on Sync with GitHub option.From Sync or download code: On the bottom-right of the </> Code view screen, click on Sync or download code.  It will open a popup where you can select the GitHub option.Step 2: Authorize GitHub with DhiWise​As you click on the GitHub option, it will ask you to sign in to GitHub to connect your account with DhiWise.Next, confirm the access and authorize with DhiWise to sync the code to your connected GitHub account.Step 3: Connect a Git repository​Now, your account is synced with DhiWise. Click on Select Git repository to select a repository from your account to which you want to add the generated code. Select a repository​A menu will show up where you can view all your existing repositories.infoYou can only sync code to an ""empty repository"".If you have an empty repository click on Select to proceed with it or add repository using ➕. Use 🔄 to refresh the list of repositories.Add a new repository​Click on ➕ icon it will redirect you to your GitHub’s create a new repository page. Enter a repository name and add a suitable description. We recommend creating a private repository. DhiWise generates a README file so no need to initialize it. Click on Create repository.Once the repository is created, go back to DhiWise and refresh 🔄 the menu to select the created repository. Click on Select.Step 4: Commit code to the repository​Confirm the selected repository details. Click on Change repository to change the selected one else click on Commit to push the entire application codebase to the repository.As your code is successfully committed, a snack bar will appear with a branch name where the entire code is committed. Note that branch name. DhiWise pushes your code to a new branch with ""DhiWise"" as a prefix.Here you complete your code sync process. Now, go to your GitHub repository and switch to the noted ""DhiWise"" branch. There you will find your entire synced code.Push new changes from DhiWise​When you again push new changes to the present repository, below are some tips to be aware of:Whenever you commit your new changes, DhiWise pushes it to a new branch with ""DhiWise"" as a prefix.The changes are pushed to the repository using a pull request made to the main branch.We recommend merging the first time synced DhiWise branch to a new branch(e.g. develop branch), so it becomes easy for you to merge the upcoming branches and maintain your code.Now, when you make any changes to your app in DhiWise and build an app, follow the same process to commit and push your new changes.Click on Sync or download code, in the popup you will be able to see your last commit details like branch name, repo URL, date and time. Confirm and click on Commit to push the new changes.Sync app code to GitLab​Connect DhiWise with your GitLab account and push the generated application code to your GitLab project.Follow the steps below to integrate GitLab in DhiWise:Step 1: Select GitLab integration​You can integrate GitLab using two options:From Settings: From the Settings icon select Integrations under Application settings, and click on Sync with GitLab option.From Sync or download code: On the bottom-right of the </> Code view screen, click on Sync or download code.  It will open a popup where you can select the GitLab option.Step 2: Connect using SaaS or Self Manage​As you click on the GitLab option from Settings, a popup will show up with some prior instructions to follow and options using which you want to sync the code.Connect using GitLab SaaS​Add Personal access token of admin of the GitLab account and click on Submit. Now, your account is synced with DhiWise.Connect using GitLab Self manage​Add the Domain URL, Username, and Personal access token of your GitLab account and click Submit. Now, your account is synced with DhiWise.Next, click on Whitelist to whitelist DhiWise IP to sync code to your account.Step 3: Connect a Git repository​Now, your account is synced with DhiWise. Click on Select Git repository to select a repository from your account to which you want to add the generated code.Select a repository​A menu will show up where you can view all your existing repositories.infoYou can only sync code to an ""empty repository"".If you have an empty repository click on Select to proceed with it or add repository using ➕. Use 🔄 to refresh the list of repositories.Add a new project​Click on ➕ icon it will redirect you to your GitLab’s create a project page. Enter a project name. We recommend creating a private project. DhiWise generates a README file so no need to initialize it. Click on Create project.Once the project is created, go back to DhiWise and refresh 🔄 the menu to select the created project. Click on Select.Step 4: Commit code to the repository​Confirm the selected project details. Click on Change repository to change the selected one else click on Commit to push the entire application codebase to the project.As your code is successfully committed, a snack bar will appear with a branch name where the entire code is committed. Note that branch name. DhiWise pushes your code to a new branch with ""DhiWise"" as a prefix.Here you complete your code sync process. Now, go to your GitLab project and switch to the noted ""DhiWise"" branch. There you will find your entire synced code.Push new changes from DhiWise​When you again push new changes to the present repository, below are some tips to be aware of:Whenever you commit your new changes, DhiWise pushes it to a new branch with ""DhiWise"" as a prefix.The changes are pushed to the repository using a pull request made to the main branch.We recommend merging the first time synced DhiWise branch to a new branch(e.g. develop branch), so it becomes easy for you to merge the upcoming branches and maintain your code.Now, when you make any changes to your app in DhiWise and build an app, follow the same process to commit and push your new changes.Click on Sync or download code, in the popup you will be able to see your last commit details like branch name, repo URL, date and time. Confirm and click on Commit to push the new changes.

Got a question? Ask here."
"1720375819-2","https://docs.dhiwise.com/docs/flutter/social-authentication/","Build App and Preview","https://docs.dhiwise.com/docs/flutter/build-or-preview-app","Build App and PreviewBuild App​Get your complete app code by building your app, and then download or sync it with GitLab & GitHub.As you are done with your Flutter app setup, by modifying UI, adding actions on widgets or want to directly get the view code, follow the below steps for the same;Step 1: Build app​Go to the screen list, and click on Build app.Step 2: Select build type - with state management/without state management​As you click on it, a popup to select a preferred state management will arise as below, you need to select one option and proceed ahead to build app with the preferred state management code.GetX: Includes responsive UI, Stateless widgets, Custom reusable widgets, Models, Navigation and all the other integrations code with GetX state manager.BLoC: Includes responsive UI, Stateless widgets, Custom reusable widgets, Models, Navigation and all the other integrations code with BLoC state manager.Provider: Includes responsive UI, Stateless widgets, Custom reusable widgets, with Provider state manager.Riverpod: Includes responsive UI, Stateless widgets, Custom reusable widgets, with Riverpod state manager.Without state management: Includes responsive UI, Stateless and Custom reusable widgets code.  As you select an option, it will start building your app by redirecting you to a page where you can see the build progress and also some app information which will help you know your generated code easily, like SDK versions, Libraries used in the app code, and Package Structure.Step 3: View/Download/Sync code​Once the process is done, click on View Code, where you can view, download source code as a ZIP file, sync it to a preferred IDE or to GitHub & GitLab.tipBuild app again when you integrate any new feature or add changes and get your app code again!Preview App​Preview your complete app design right here to see your app’s generated design results and make changes priorly again to get your design results more accurately.As you set up your Flutter app follow the below steps:Step 1:​Go to the screen list, and click on Preview button.Step 2: Preview app design​As you click on it, it will start to build your design code, within few minutes you can preview your app design, as shown below.infoSwitch between different devices’ resolutions easily, and check how it fits in.On the Preview page, you can switch between different screens and preview them live here and check each screen’s UI easily.Shareable Preview​Share the app's preview with your team. Click on Share and 🔗️ Copy link in the top right corner.

Got a question? Ask here."
"1720375821-3","https://docs.dhiwise.com/docs/flutter/social-authentication/","Export Code","https://docs.dhiwise.com/docs/flutter/export-code","Export CodeEasily export code for single or multiple screens, directly from Figma or DhiWise. Within a few clicks export code, add the code to your existing apps or start creating a new one.Using DhiWise Figma Plugin​While using DhiWise Figma-to-code plugin in Figma for your app’s design, you can directly start creating an app as you are done with your app design. DhiWise provides an option to export code for all the screens or selected ones.Step 1: Select screens​After activating DhiWise Figma-to-code plugin for Flutter app, select the screens in Figma design for which you want to export the code.Step 2: Select technology as Flutter and Export option​Next, select Flutter for mobile technology, and ensure the All Frames option is selected under Export option in the plugin panel. If you want to export only selected frames, choose Selected Frames option.Step 3: Paste Figma URL and Create app​Add the Figma URL in the field for which you want to export screens and click on Create app. This will start fetching the Figma resources and will create an app in DhiWise using the exported screens.
Learn more on Figma plugin here.From App Screen list​Export screen code from your created app in DhiWise.Step 1: Go to screen list​Go to the screen list for the created application.Step 2: Select screens​Select the checkbox Export screen for the screen/screens that you want to export.Step 3: Export screen code​Once you select it, click on the Export screen code button, located at the bottom of the screen.Step 4: Select Code type​As you click on it, a popup to select a preferred code type will arise as below, you need to select one option and proceed ahead to export code with the preferred state management code/or without state management code.GetX: Includes responsive UI, Stateless widgets, Custom reusable widgets, Models, Navigation and all the other integrations code with GetX state manager.BLoC: Includes responsive UI, Stateless widgets, Custom reusable widgets, Models, Navigation and all the other integrations code with BLoC state manager.Provider: Includes responsive UI, Stateless widgets, Custom reusable widgets, with Provider state manager.Riverpod: Includes responsive UI, Stateless widgets, Custom reusable widgets, with Riverpod state manager.Without state management: Includes responsive UI, Stateless and Custom reusable widgets code.To start creating a Flutter app from the initial without any state management and only design code, choose Without state management (only widgets), and click on Build.And if you want complete code with state management for your selected app screens, pick a preferred state management, and click on Build.Step 5: Generate code​Once you select your choice, the selected screens code will start to generate;Once the code is generated, it will redirect you to the generated code screen. You can easily download the source code or simply Copy to clipboard from here easily and can add the selected screens code into an existing app or start creating a new one using it.While Configuring Screen​If you are inside a particular screen and wish to export code for the same, export code for single screen from screen Configure option.Step 1: Select Export code option​Open the screen list dialog using the down arrow in the top-left corner, and click on the dots to open a menu, and select Export code.Step 2: Select Code type​As you click on it, a popup to select a preferred code type will arise as below, you need to select one option and proceed ahead to export code with the preferred state management code/or without state management code.GetX: Includes responsive UI, Stateless widgets, Custom reusable widgets, Models, Navigation and all the other integrations code with GetX state manager.BLoC: Includes responsive UI, Stateless widgets, Custom reusable widgets, Models, Navigation and all the other integrations code with BLoC state manager.Provider: Includes responsive UI, Stateless widgets, Custom reusable widgets, with Provider state manager.Riverpod: Includes responsive UI, Stateless widgets, Custom reusable widgets, with Riverpod state manager.Without state management: Includes responsive UI, Stateless and Custom reusable widgets code.To start creating a Flutter app from the initial without any state management and only design code, choose Without state management (only widgets), and click on Build.And if you want complete code with state management for your selected app screens, pick a preferred state management, and click on Build.Step 3: Generate code​Once you select your choice, the selected screen code will start to generate;Once the code is generated, it will redirect you to the generated code screen.You can easily download the source code or simply Copy to clipboard from here easily and can add the selected screen code into an existing app or start creating a new one using it.

Got a question? Ask here."
"1720375824-4","https://docs.dhiwise.com/docs/flutter/social-authentication/","Form Field Validations","https://docs.dhiwise.com/docs/flutter/textformfield-validations","Form Field ValidationsMobile apps often require the user to add a valid input for the text fields to make apps secure and easy to use and check whether the information provided is valid for Login or Register screens.If the user enters incorrect information, it also displays a friendly error message letting them know what went wrong.Follow below to understand how to set validation on a text field for your application screens.How to set validation on TextFormField​Step 1: Select screen​Select a screen from the list of screens available inside which you want to add a validation action on a TextFormField.Step 2: Select a TextFormField, add choose Validation​Next, select a TextFormField widget and from the list of the suggested actions select Validation to start its set up. OR press Ctrl + Space to see the supported suggestions.Step 3: Select validation type​Next, choose the type of validation you want to add on the TextFormField:Default validation​Here, are the validations that are commonly used in mobile apps, and are quite often required. Default validation includes Email, Password, Phone Number, Number only, Text only, Mobile number, and Not empty. Also, a boolean property required is attached to the widget to manage whether it is a required field or not, with false as its default value.Custom validation​If you have a custom requirement to be set for the validation, or which is not supported in the default validations, you can add your own customized validation by providing the required parameters.Click on + Add Custom Validation, provide a valid Name for the validation function, Regular Expression to validate the entered input, and a Message to show a message when the entered input is incorrect. Also, a boolean property required is attached to the widget to manage whether it is a required field or not, with false as its default value.Lastly, click on Submit to add custom validation on the TextFormField.

Got a question? Ask here"
"1720375827-5","https://docs.dhiwise.com/docs/flutter/social-authentication/","Runtime Permissions","https://docs.dhiwise.com/docs/flutter/add-permissions","Runtime PermissionsPermissions are set to get control of your phone and access to your camera, photos, contact list, location, and phone storage. App permission requests pop up the first time an app needs access to data on your phone and are related to user privacy.How to set up permission​Step 1: Select screen​Select the screen from the screen list on which you want to add permission.Step 2: Select a widget, add onClick, choose Permissions, and a Permission type​Choose the widget and on the onClick property, select Permissions from the list. Next, select the type of permission you want to set in runtime.Supported runtime permission types:TypeDescriptionCamera + GalleryAllow access to use camera and photosStorageAllow access to use phone storageLocationAllow access to use real-time locationContact listAllow access to use the contact listAt this stage, you have successfully added permissions to your application.

Got a question? Ask here."
"1720375829-6","https://docs.dhiwise.com/docs/flutter/social-authentication/","Open DatePicker or TimePicker","https://docs.dhiwise.com/docs/flutter/open-dateppicker-and-timepicker","Open DatePicker or TimePickerMobile apps needs user input for date and time to store user details or access some features. Easily open such pickers by following below steps to add it in your app using DhiWise.How to open a DatePicker​Step 1: Select an icon or a widget​Select the screen from the screen list on which you want to open a DatePicker and select an icon or widget.Step 2: Add onClick and choose Date picker​Add the onClick property and select Date picker from the listed actions.And in a single step, you have successfully added date picker action to your application.How to open a TimePicker​Step 1: Select an icon or a widget​Select the screen from the screen list on which you want to open a TimePicker and select an icon or widget.Step 2: Add onClick and choose Time picker​Add the onClick property and select Time picker from the listed actions.And in a single step, you have successfully added time picker action to your application.

Got a question? Ask here."
"1720375832-7","https://docs.dhiwise.com/docs/flutter/social-authentication/","Add App Constants","https://docs.dhiwise.com/docs/flutter/add-app-constants","Add App ConstantsConstant files are used in app for easy access to the value which is to be used globally throughout the app. Create, delete constant files and add constants to it in your app and use it wherever you want to easily.How to set up constants​Step 1: Go to Constants​Go to Constant from the screen dashboard on the left hand.Step 2: Add a new constant file​Now click on Add constant to add a new constant file to your application.Step 3: Give constant file a name​Add an appropriate file name for your constant file and click Create constant.Step 4: Create and add constants​As your file is now created add your constants in it, for that, you need to add the following to create a constant.NameProvide an appropriate name for constant,
 only alphanumeric values with _ are allowed, and not starting with numberData typeSelect a data type based on the value of your constant,
INTEGER | STRING | FLOAT | DOUBLE | BOOLEANValueAssign a value to added constant.Similarly, you can add multiple constants to your file. Also, you can add multiple constant files by clicking on the ➕ icon as shown below;Step 5: Save or Delete created constants​Once you have added the constants click on Save. To delete a constant click ❌ and to delete a constant file click Delete.At this stage, you have successfully added constants to your application.

Got a question? Ask here."
"1720375834-8","https://docs.dhiwise.com/docs/flutter/social-authentication/","Open URL","https://docs.dhiwise.com/docs/flutter/set-hyperlink","Open URLMost mobile applications provide links that take users to a different section of the same app or to external websites. Open URL helps us in achieving this in our Flutter application.How to open an URL​Step 1: Select screen​Select the screen from the screen list on which you want to set up open URL.Step 2: Select a widget, add onClick, choose Navigation, and add function name​Select a widget on which you want to set open URL action, add an onClick property and select Navigation from the listed actions. Also, submit a valid function name for the method name as it will appear in the generated code.Step 3: Select Open Url as navigation type​Select Open Url for Please choose the type of navigation you want to add to add the action.Now, add the URL which you want to open on the click of widget for Which URL to navigate, please add URL, and lastly, Save changes.At this stage, you have successfully set open URL action in your application.Generated code snippet​ onTap() async {
    var url = 'https://www.dhiwise.com/';
    if (!await launch(url)) {
      throw 'Could not launch https://www.dhiwise.com/';
    }
  }


Got a question? Ask here."
"1720375837-9","https://docs.dhiwise.com/docs/flutter/social-authentication/","Close Dialog or Bottomsheet","https://docs.dhiwise.com/docs/flutter/close-dialog-or-bottom-sheet","Close Dialog or BottomsheetOpen Dialog or Bottom sheet on click of widget or view component.cautionClose dialog action can only be set up on Dialog and Bottom sheet screens. Step 1:​Go to a dialog or bottom sheet screen, and switch to the widget or view component on which you want to add the close dialog action.Step 2:​On the onClick property select Close dialog from the actions listed.At this stage, Close Dialog functionality is successfully added to your application.

Got a question? Ask here."
"1720375839-10","https://docs.dhiwise.com/docs/flutter/social-authentication/","Open Drawer","https://docs.dhiwise.com/docs/flutter/open-drawer","Open DrawerA drawer is an invisible side screen. It is a sliding left menu that generally contains important links in the application and occupies half of the screen when displayed. Drawer is a short menu from which you can navigate to app functionalities easily.How to set up open drawer​Step 1: Select screen​Select the screen from the screen list on which you want to set up open drawer by clicking on Configure.Step 2: Select a widget, add onClick, choose Navigation, and add function name​Select a widget on which you want to add action by adding an onClick property and select Navigation from the listed actions. Provide a valid function name for the trigger method which will be generated in the code for the Open Drawer action and click on Submit.infoDhiWise auto-identifies all the drawer item screens of your app, which helps you choose a drawer item easily while you set up the action.Step 3: Select Open Drawer as navigation type​You will need to provide input for Please choose the type of navigation you want to add you want to perform, here select Open Drawer from the list.
Then a list of drawer item screens will be displayed. Pick one which you want to open on the tap of widget for Choose the screen on which you want to navigate.Once the screen is selected, click on Save changes.

Got a question? Ask here."
"1720375842-11","https://docs.dhiwise.com/docs/flutter/social-authentication/","Show Alert","https://docs.dhiwise.com/docs/flutter/show-alert","Show AlertAn alert can be termed a floating view that calls for an immediate response. Alerts are fairly simple to configure.
You can set up an Alert dialog, Snackbar, or Toast for any UI component by entering Title and Message for the alert dialog and only Message for Snackbar or Toast.How to set up an alert​Step 1: Select screen​Select the screen from the screen list on which you want to set up alert dialog.Step 2: Select a widget, add onClick and choose Show alert​Now, select a widget on which you want to open an alert, and onClick property, choose Show alert.Step 3: Add function name​Provide a valid function name for show alert method to be generated in the code.Step 4: Select alert type​Add input for Please choose the type of alert you want to integrate select a type from the below;Alert dialogAlert Dialog is used to display an Alert message and provide a yes-or-no responseToastIt provides simple feedback about an operation in a small popup and disappears on its own after the allotted time is overSnackbarIt is a lightweight message that briefly informs the user when a certain action occurs and disappears on its own after the allotted time is overStep 5: Add suitable title and message for alert​Next, you need to provide an appropriate message for your Alert dialog/Toast/Snackbar as chosen by you and also a title if you have chosen an Alert dialog. And click on the Save change in the top right corner.At this stage, you have successfully added an alert to your application.

Got a question? Ask here."
"1720375844-12","https://docs.dhiwise.com/docs/flutter/social-authentication/","API Integration","https://docs.dhiwise.com/docs/flutter/api-integration","API Integration[https://www.youtube.com/embed/_Mgh05yGBV4]APIs play a vital role in making an application interactive. An application has to integrate a number of different APIs into it for its different functionalities to work. With DhiWise, set up these APIs easily for your application.Add APIs​To integrate APIs you require an API for your application in DhiWise, to use the same and set it up. Add APIs manually or import your Postman collection in DhiWise. ReferAdd APIs and Environment variablesSet up APIs​Integrate API on tap of screen's widget easily using the following steps:tipYou can also integrate APIs in onReady lifecycle method. Learn more.Select screen​In your DhiWise application, select the screen from the screen list or choose Configure option for a particular screen, in which you want to set up an API.Select widget​Now, as you open the screen in detail view, switch to the widget on which you want to integrate an API, add onClick property for setting up action and choose API integration from the actions list, as shown below.Set function name​As you choose API integration action, firstly it will ask you to submit a valid function name for your API integration which will be generated for your screen code.Select your API​Select an API that you want to bind with the selected widget or lifecycle method, from the list of APIs added in DhiWise.Now as you select the API, three following required steps are needed to be set up to complete your API integration. Step 1: Handle Request​Header and Params​Set your API’s Header, Parameters, and Body by switching to Handle request area. Headers and Parameter values will be the same as you have added while you add your API. Easily modify them if you want to change or add new values here.Body​Switch to Body property and bind your request key with any of the below supported types to send data to your API request.infoYou can bind request keys with TextFormField only.TypeDescriptionViewScreen's widget or view componentConstantApplication app constant Learn moreAPI responsePriorly saved API responseGet from preferenceStored value from preferencesNavigation argumentSaved argument while navigation Learn moreinfoFor ""API response"", you can bind the response of previously called API or social auth response i.e. of Google or Facebook.Step 2: Handle Response​Bind Response with View​Bind the response values with the views of your screen when you need to display the response coming from the APIs. Select the key from the response, select View from the options, and select the view in which you need to display the response from the right.infoYou can bind response keys with the views like ListView, GridView, Text, TextFormField, Image, Slider etc.For example, when the user logins into an app and want to display the user profile details like email, name, and profile picture, just select the available keys from the API response and bind it with the text and image where it can be displayed, as shown below.Bind Response with ListView/GridView or Slider​Load data in your screens by binding the response body such as an array with the ListView/GridView or Slider view.For a single cell of the ListView/GridView or Slider, you can easily bind its details as shown below.Save Response to Preferences​While handling your response data, save them to preferences by selecting the response key and giving it the desired name.Select the key you want to save from the response, select Save to preference from the options, give the key a name you want to save with, and click on Save changes.Step 3: Handle Actions​Handle and choose what to perform on the success and failure methods after the API call in Handle action area.On success and error actions​infoDhiWise considers response code of 200 for a successful API call.Select an action you want to execute on these methods from the actions list and set it up accordingly with the required inputs. Actions supported on these methods are:API IntegrationNavigationShow Alert dialog, Toast, Snackbar
Click on Submit and your API is integration is done.

Got a question? Ask here."
"1720375846-13","https://docs.dhiwise.com/docs/flutter/social-authentication/","Add APIs and Environment Variables","https://docs.dhiwise.com/docs/flutter/add-apis-and-enviroment-variables","Add APIs and Environment VariablesEasily create a new API or import APIs via their files or URLs to start integrating them into your application screens.Go to your Flutter app builder, on the screen list select API Integration from the left menu. Here, you can Create a new API, Delete or Edit an existing one, Upload APIs if you already have them, and view all your added APIs of the application.You can add APIs using two ways:Import Postman collection/Environment/Swagger file or URLs​Click on Import APIs, to upload Postman collection/Environment or Swagger file. Select and upload the file to proceed ahead.Click on Import APIs, select Link tab, add Postman or Swagger URL to import your APIs.Create APIs manually​Click on  + Create an API button, to manually add an API. This will redirect you to the API runner page, where a complete API setup resides.Step 1: Select method for API and add URL​Select the API method from the top-left and enter the URL. Below is the list of methods that are supported;MethodDescriptionPUTCreates or updates a specified resourceGETRetrieves information from a specified resourceDELETEDeletes the value of the specified resourcePATCHUpdates the value of the specified resourcePOSTSends data to a server to create/update a resourceinfoIf Headers and Params are already set into the Postman collection for an API then it will be auto-set here.Step 2: Set Headers, Params and Body​The next step is to add Headers, Params, and Body;HeaderAdd header configuration by setting key valuesParamsAdd query parameters and sample valuesBodyAdd/bind API request body
Send API request​Once you Send the request. You will get the response and the API will be auto-saved for you. To send request click on Send or use shortcut Ctrl + G.JSON: Your API response will be formatted into JSON, which will be visible from here.Raw: The raw API data which you got from the API response is available here.Headers: The headers from the API response are stored here.infoShow code: Get code for your API by clicking on Send -> Show code or simply use shortcut S. You can select from a range of languages available.Import cURL: Import API from cURL by clicking on Send -> Import cURL or simply use shortcut CAdd Environment Variables​The environment variable Global comes as default. However, you can always create new variables. To use those variables in the URL simply use curly braces {{variable_name}}Once you've built the app follow the TODO in your source code to change to different environment variables.

Got a question? Ask here."
"1720375848-14","https://docs.dhiwise.com/docs/flutter/social-authentication/","Manage App Lifecycle","https://docs.dhiwise.com/docs/flutter/manage-app-lifecycle","Manage App LifecycleThe lifecycle of the Flutter app is how the application will change its state.How to set up app lifecycle​Step 1: Select screen​Select the screen from the screen list on which you want to set up the lifecycle.Step 2: Go to onReady method call set up​Click on Setup onReady method call available in the top left corner below the screen selection dropdown or simply press Ctrl + L to set up lifecycle for a screen.Step 3: Select action​Next, select the action to be performed in the on Ready state. Below is the list of supported actions:[https://www.youtube.com/embed/Hu5-3qYz6sw]API Integration

Integrate APIs to your app lifecycle, simply select API Integration, and select the API from the list of APIs, that you want to call on invoking the method. Also, you can add new API to your application in DhiWise. Learn moreNavigationSet navigation on lifecycle method by selecting Navigation from the list. Learn moreShow alertYou can set up an Alert dialog, Snackbar, or Toast on the application’s lifecycle method Learn morePermissionsAdd Permissions to your app lifecycle, this will ask for Permission on the on Ready state of an application. You can set Camera + Gallery, Store Permission, Location, and Contact list types of permission. Learn moreStep 4: Save changes​Select the appropriate action and click on Save changes.

Got a question? Ask here."
"1720375850-15","https://docs.dhiwise.com/docs/flutter/social-authentication/","Navigation","https://docs.dhiwise.com/docs/flutter/navigation","NavigationNavigation makes applications more interactive, which helps users navigate in, out, and across the app. Add such navigations to your Flutter app in few simple steps:Add Navigation​Step 1: Select screen​Select the screen from the screen list on which you want to add the navigation action. Step 2: Select a widget, add onClick and choose Navigation​Next, select a widget on which you want to add navigation and add the onClick property and choose Navigation from the list, which will take you to the navigation setup screen.As you choose Navigation action, firstly it will ask you to submit a valid function name for your Navigation action which will be generated for your screen code.Step 3: Select navigation type​You will need to provide input for Please choose the type of navigation you want to add you want to perform, where you will have to add the type of Navigation, from the below supported types;TypeDescriptionScreen NavigationNavigate to a specifically selected screen from the app’s screen listBottomSheetOpen or navigate to a bottom sheetDialogOpen or navigate to a dialogReplace WidgetNavigate to replace a widget for the BottomBar's itemOpen DrawerOpen or navigate to a drawerOpen UrlOpen or navigate to an URLStep 4: Select a new screen for navigation​If you are selecting Screen Navigation you will be asked Choose the screen on which you want to navigate , select a screen you want to navigate to from the screens list on the right, you can also filter screen from Dialog, BottomSheet, and Screens.Once your screen is selected, you will be asked to Select Finish screen.Step 5: Setup Finish screen​As you click on Select Finish screen  you will be asked to Select Option from the following:TypeDescriptionFinish all screensAll screens from the navigation stack will be removedFinish current screenOnly current screen will be removed from the navigation stackStep 6: Save changes​Once your finish screen setup is done, save your changes by clicking on Save changes in the top right corner. At this stage, you have added Navigation to your application.Navigation with Arguments​Perform data sharing between screens, in a few simple steps, while navigating from one screen to the other.Step 1: Add arguments​Pass data as an argument while navigating from one screen to another, press Ctrl + Enter. Next, add arguments where you need to Enter name for key which will be passed as an argument. The key is used as a name for an argument to declare it in your code.Step 2: Select argument type​Select argument type here you need to select the type of argument you want to bind with navigation from the following:TypeDescriptionAPI responseBind the response of an API used in an appNavigation argumentBind an argument saved earlierConstantBind a constant from the app constantsinfoFor ""API response"", you can bind the response of previously called API or social auth response i.e. of Google or Facebook.Step 3: Select API​If you select API response you will be asked to Select API from the APIs available in your app.Learn more on how to add new APIs to your application.Step 4: Select API response​Next, you need to Select API response for the selected API. Choose the response key to bind with your argument from the list. However, you can also bind multiple keys in your argument.Step 5: Save changes​Once you add an argument, save your changes by clicking on Save changes in the top right corner. infoIf you want to add a new argument press Ctrl + NAt this stage, you have successfully added navigation with arguments to your application.Back Navigation​Navigate back to the previously visited screens of your app using back navigation.Step 1: Select screen​Select the screen from the screen list on which you want to add the action.Step 2: Select a widget, add onClick and choose Back navigation​Next, select a widget on which you want to add back navigation and add the onClick property and choose Back navigation from the list. At this stage, you have successfully added back navigation by which you will be able to visit your previous screen.Generated code snippet​GestureDetector(
onTap: () {
  onTapImgArrowleft();
},
child: Padding(
    padding:
        getPadding(top: 4),
    child: CommonImageView(
        svgPath: ImageConstant.imgArrowleft,
        height: getVerticalSize(18.00),
        width:  getHorizontalSize(10.00)
    )
  )
)
onTapImgArrowleft() {
    Get.back();
}
Replace Widget​For BottomNavigationBar, the action for its items are auto-identified and set with their respective screen. If you want to traverse to a new screen on tap of a BottomNavigationBar's items like icons or texts, use Replace Widget.cautionThis action only works on BottomNavigationBar’s container screen’s items.Step 1: Select the container screen​Select the screen from the screen list on which you want to add the action. Here, you would need to select the container screen where the BottomNavigationBar resides.Step 2: Select the BottomNavigationBar item, add onClick and choose Navigation​Next, select the BottomNavigationBar item on which you want to add the action and add the onClick property and choose Navigation from the list.Step 3: Set function name​Provide a valid function name for the trigger method which will be generated in the code for the action and click on Submit, as shown below.Step 4: Select Replace Widget as navigation type​You will need to provide input for Please choose the type of navigation you want to add you want to perform, here select Replace Widget from the list.Step 5: Select a new screen for navigation and save changes​Then a list of BottomNavigationBar item screens will be displayed. Pick one which you want to open on the tap of widget for Choose the screen on which you want to navigate.You can also set up the Finish screen and pass navigation arguments, if any.Once the screen is selected, click on Save changes.At this stage, you have successfully added replace widget action.

Got a question? Ask here."
"1720375852-16","https://docs.dhiwise.com/docs/flutter/social-authentication/","Group/Ungroup or Delete Widget","https://docs.dhiwise.com/docs/flutter/group-ungroup-delete-widget","Group/Ungroup or Delete WidgetEasily group, ungroup or delete widgets in a single click, group them in a row, column or stack and manage your design hierarchy efficiently.Group widgets​To wrap a group of widgets in a row, column or stack, select those widgets from the design hierarchy and right-click on the highlighted blue color. Select Group or press Ctrl + G keys.Next, you will be asked to select one from Wrap with Row, Wrap with Column, and Wrap with Stack according to your design preferences.To easily select widgets you can also expand or collapse widgets.Ungroup widgets​To unwrap a group of widgets, select those widgets from the design hierarchy and right-click on the highlighted blue color. Select Unwrap or press Ctrl + Shift + G keys, and your widgets are ungrouped from the hierarchy.Delete widget​To delete a widget or a group of widgets, select that widget or the group from the design hierarchy and right-click on the highlighted blue color. Select Delete or use Delete key, and the selected ones will be removed from the hierarchy.

Got a question? Ask here."
"1720375855-17","https://docs.dhiwise.com/docs/flutter/social-authentication/","Change Widget and Widget Properties","https://docs.dhiwise.com/docs/flutter/change-widget","Change Widget and Widget PropertiesAfter fetching Figma, the algorithm identifies the widgets in your design and generates UI on the basis of it for your app. However, not all the widgets may be identified appropriately. Therefore, use this functionality to modify the widget to its suitable type.Existing widget can be changed to AutoCompleteTextField, Button, CheckBox, Dropdown, TextFormField, SearchView, and many more.infoCheck out other dynamic views like Map, Calendar, and many more, which are not auto-identified but are supported in change widget.How to change a widget​Step 1: Select widget​In the screen design hierarchy, go to the widget you wish to modify.Step 2: Select new widget​Just erase the widget name and press Ctrl+Space for a widget suggestion and select the appropriate widget you wish to modify.Based on the modified widget, related widget properties are also added together so, you can change the properties or their value easily.Expand/Collapse Widget​To easily view the design hierarchy of a screen, you can expand and collapse a widget with a click and organize the design to easily view the design hierarchy.Change Widget Properties​Modify the widget's properties by adding a new property, or editing/removing an existing one.infoTo undo the changes, while working on widget properties, use Cmd/Window + Z.Add a new property​Switch to a widget property, and get onto a new line, as you come to a new line, it will show you the suggestions for adding a property or press Ctrl+Space, from which you can select one and add it as a key, similarly, you can add the value for it, as shown below.Delete/Remove a property​To delete a property, you can simply erase it.Modify a property​To modify a property’s key or value, simply erase it and add the new one from the suggestions or do it manually type out.Add an onClick property​To set up an action on tap of a widget, switch to a new line and select onClick property from property suggestions list OR use 💡 smart suggestions and select the onClick property.You can set up actions like navigation, API integration, authentication, runtime permission, back navigation, show alert, or open a date/time picker using onClick widget property.

Got a question? Ask here."
"1720375857-18","https://docs.dhiwise.com/docs/flutter/social-authentication/","Sync Design Changes","https://docs.dhiwise.com/docs/flutter/sync-design-changes","Sync Design ChangesWith the Sync design changes feature, you don’t have to keep going back to look at your Figma designs or create a new app in DhiWise every time you change your design. Just with the help of a click, you can see all the updates right away. No need to switch to the design file for it; we have it all covered right here.cautionThe Sync design changes feature doesn’t work with templates.How to sync design changes from Figma design file?​In the editor area, look at the top-right for the Sync design changes button, which is located below the Build button. When you click on it, you will see two options:   Only current screen: Use this option to resync the design changes of the current screen only.   All the screens: Use this option to resync the design changes of the entire application.Select the option that suits your needs, and the process will begin.With the All the screens option, as it starts fetching the design changes, it will first display the screen details. This includes newly added screens, existing ones, and any that have been removed. You can easily add or remove them. Simply make your selections as needed and click Next to proceed with the screens.Resolve design conflicts​When you click Next, the system will begin fetching your design changes. However, if there are any conflicts during this process, it will display the conflicts that need to be resolved before proceeding further.Live preview of changes Accept the changes fetched from Figma and integrate them into your app in DhiWise. Both the original and updated designs will appear side by side, similar to an IDE. You need to accept the changes as you would in a merge request. Additionally, you will see the resulting file and a live preview of the design changes on the right.Lastly, click Apply, and the design changes from the Figma file will be updated in your application.Save a named version of the design changes in Figma file​Creating a named version of Figma file helps to use the latest design version. This helps in resyncing your design changes properly. Add a newly named version of your Figma file. Open the Figma menu, and select Save to Version History.Add a title and description for your new version and summarize your changes.Example Title: “Splash screen added”Example Description: “A new version has been added for Splash screen.”Click Save to create a new version.Now, return to DhiWise and initiate the Sync Design Changes process again. This action will apply the latest updates from your design to DhiWise application, ensuring your app reflects the most recent changes.

Got a question? Ask here"
"1720375859-19","https://docs.dhiwise.com/docs/flutter/social-authentication/","Set up Splash Screen","https://docs.dhiwise.com/docs/flutter/setup-splash-screen","Set up Splash ScreenThe splash screen is the first screen that appears when the app launches. Easily set up your app's splash screen and the screen next to splash in DhiWise.Once, the application is created in DhiWise, you will be asked to select the splash screen for your application.Step 1: Set up Splash Screen​Select a screen from list of screens available to set it as the initial screen for your application and click Next step.Step 2: Set up Screen Next to Splash​Once you have selected the splash screen, here you will have to select the “Screen next to splash” i.e. the screen that will appear after the splash screen and click Submit.Once splash screen set up is completed you will be redirected to screen list, where you can see your splash screen as the first screen.Change Splash Screen​To change Splash screen of your app, click on the Settings icon available in the right corner and click Change and follow the same steps as mentioned above.  

Got a question? Ask here."
"1720375861-20","https://docs.dhiwise.com/docs/flutter/social-authentication/","Build a Flutter App","https://docs.dhiwise.com/docs/flutter/intro","Build a Flutter AppFlutter app builder is the fastest way to bring your app design to life without weeks of coding. Get everything right here in your app from design to code, to app sync on GitHub or GitLab, along with multiple app features like API integration, in-app Runtime Permissions, Social authentication.TemplatesScreen Library
noteDhiWise converts your design to code by auto-identifying all your screen UI, widgets, and generates complete code for the same. Easily set up actions on your widgets like Navigation, API Integration, Social authentication, and many more to easily generate your complete app in no time!Project set up​Quick steps to set up your entire Flutter application:Create an application: Create a new application using Figma design, or create one from the vast collection of templates or screen library.Customize design: Edit and modify widgets and their properties to mitigate design issues before you build your app.Change widget: Change or modify the widgets easily, rather than moving back to Figma.Set up Actions on widgets: Add actions like Navigation, Social Authentication, Runtime Permissions, and many more on your widgets.Add APIs and Environment variables: Add APIs manually or upload a Postman collection and start integrating APIs in your app.Manage app life cycle: Set up ""onReady"" method call and integrate actions to it in a few clicks.Build app: Lastly, build your app anytime and own your app source code.tipSign up to DhiWise, if you haven't already!Create an application​Click on New application.You will have three options to create an applicationCreate a new app: Create an application from scratch by importing your app design from Figma.Create from templates: In case you do not have an app design file, create an application from the wide range of built-in templates based on various categories.Create from screen library: Pick screens of your choice based on a category and create an application from 500+ screens provided by DhiWise.Create a new app​[https://www.youtube.com/embed/_IC-oNoAZh0]Step 1: Give app a name, choose technology as Flutter​Select platform as Mobile to create a Flutter app. Next, enter your Application name and select Technology from the drop-down as Flutter.Step 2: Select Figma account and paste Figma URL​Click on Add new account to link your Figma account with DhiWise. Paste the Figma file URL of your app design, and click on Create a new app. cautionSelect the same viewport size as that in your Figma design.Step 3: Select screens and pages​Next, select screens/ pages of your choice for which you want to create an app or directly click on Select all screens, and click Submit to start fetching the selected resources from Figma design. cautionIf you are trying to sync someone else’s private Figma, you won’t be able to access that design.Step 4: Glance of auto-identified widgets and actions​As all your screens and Figma resources are fetched, whatever is auto-identified using DhiWise will be seen first in a Pop-up as below shown reference.In this pop-up you will be able to find all the auto-identified widgets, custom widgets, validations, and actions like Navigation, Back Navigation, and Social Authentication.Step 5: Set up initial screens​Select Splash Screen​Choose your app's Splash screen to be appeared during app launch, from the list of application screens.Select Screen Next to Splash​Choose a screen to be appeared after the Splash screen vanishes.Create from templates​[https://www.youtube.com/embed/C188SaJyr3w]In case you do not have a design file or want to create one from a built-in template, choose one and create an app. DhiWise offers multiple production-ready app template designs with a various range of categories.Step 1: Pick a template of your choice​Select a template based on category of your choice.Step 2: Use template​Next, click on Use templateStep 3: Give app a name, choose technology as Flutter​Enter your Application name and select Technology as Flutter, click on Create app.Create from screen library​[https://www.youtube.com/embed/XtI3GfyXLns]In case you do not have a design file you can also pick individual screens based on screen categories to create your app design quickly. For example, a login screen, authentication screen, and similarly other screens.Step 1: Pick a category to select screens​Select an app category for your screens.Step 2: Select screens​From the list of screens available for the selected category, click on ➕ to add a screen and on 👁️ to preview the screen. To remove a screen click on ❌.Step 3: Give app a name, choose technology as Flutter​Enter your Application name and select Technology as Flutter, click on Create app.

Got a question? Ask here."
