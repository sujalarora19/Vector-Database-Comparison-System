web-scraper-order,web-scraper-start-url,link,link-href,text
"1720380703-1","https://docs.dhiwise.com/docs/react/intro","Export code from Figma plugin","https://docs.dhiwise.com/docs/react/export-code","Export code from Figma pluginEasily export code for single or multiple pages, directly from Figma or DhiWise. Within a few clicks export code, add the code to your existing React apps or start creating a new one.Using DhiWise Figma Plugin​While using DhiWise Figma-to-code plugin in Figma for your app’s design, you can directly get your desired page code right away from the design. DhiWise provides an option to export the page to get the code for only the selected one.Step 1:​After activating DhiWise Figma plugin, select the pages in Figma design for which you want to export the code.Step 2:​Next, select React from web technology, and ensure the Selected Frames option is selected under Export option in the plugin panel. Lastly, add your Figma file URL.infoOn the right, as you have chosen Selected Frames options, all the selected page names will be displayed for your ease.Step 3:​Click on Generate Code button. This will start building your page code and once it's built view the entire generated code by clicking on the View Code button.From App Pages List​Export pages code from your created React app in DhiWise.Step 1:​Go to the pages list for your created application.Step 2:​Go to the page you wish to export and select the checkbox Export screen, from the right.Step 3:​After all your page selections, the Export page code button displays up at the bottom. By clicking on it, the code of the selected page will start to generate;Once the code is generated, it will redirect you to the generated code screen. You can easily download the source code or simply Copy to clipboard from here easily and can add the selected page's code into an existing app or start creating a new one using it.

Got a question? Ask here."
"1720380706-2","https://docs.dhiwise.com/docs/react/intro","App settings","https://docs.dhiwise.com/docs/react/app-settings","App settingsSettings allow you to make a variety of changes to your application.For example, you can change the name and icon of your application, delete the application, manage git synchronisation, and change the application configuration.General​You can change the name and icon of your React application to make it unique and reflect your brand.Name change​Go to the Setting -> General and update the application name, and hit Save.Icon change​Go to the Setting -> General and upload the icon and hit Save.noteMake sure that the image you upload is 1024 * 1024 in size. It will be replaced as a favicon.Integrations​GitHub and GitLab are two of the most popular version control systems in use today. For developers who use DhiWise, both of these platforms can be used to sync their application source code.For GitLab, all the functionality will be performed using a Personal Access Token, which must be generated with the selected API scopes. Additionally, GitLab Self-Host users must configure the server address to allow DhiWise to communicate with the GitLab Self-Host instance. Once the integration is set up, users can click the 'Sync' button to start the process.ImportantDo not start the repository with a README file or other options. Keep it empty.The changes will be pushed to the root of the selected repository using Pull Requests.The selected repository must be empty, and please make sure that there won’t be another branch created.For GitLab, all the functionality will be performed using a personal token.API scopes must be selected while generating the Personal Access Tokens.After the expiry of the project, git information will be removed from DhiWise.Code Configurations​You can easily configure the code of your application with DhiWise. It supports popular development tools like Storybook, ViteJS, Create-React-App, CRACO, and custom webpack configurations.This means you can tailor the code of your application to suit your specific needs and switch between different configurations whenever you want.Learn more about all the configurations.

Got a question? Ask here."
"1720380708-3","https://docs.dhiwise.com/docs/react/intro","Deploy to Vercel and Git sync","https://docs.dhiwise.com/docs/react/deploy-on-vercel","Deploy to Vercel and Git syncDeploy to Vercel​[https://www.youtube.com/embed/baVRM-mt-_k]Learn how to Deploy DhiWise React app to VercelTokens can be created and managed inside your account settings and can be scoped to only allow access for specific Teams.Create Access Token​Step 1:​Navigate to the Account Tokens page, also found under the Settings area of your Personal Account.Step 2:​Provide appropriate Token name, select Scope and select Expiration time from the dropdown.Step 3:​Copy the Token.Click on Deploy and enter your Vercel token.infoIf your repository is private then the deploy option will not work. To successfully deploy your application to Vercel, you will have to sync GitHub or GitLab account with Vercel.Sync to your Git repository​[https://www.youtube.com/embed/XSjJVmSX8Ug]Sync application code to GitHub​Step 1:​Go to applications settings and click on Integrations from the left panel. And select GitHub option.Step 2:​You will be taken to the GitHub login screen, where you are asked to provide your GitHub username/email and password, or create a new GitHub account if you do not already have one.Step 3:​After entering your credentials, you will be redirected to the authorization page. Click on Authorize DhiWisePvtLtd button to authorize DhiWise to sync code in your GitHub account.Step 4:​When the authorization is completed, you will be taken to DhiWise application settings page. Select integration and you will be able to see Select repository option. Please select blank repository; you will not be able to select a repository that already contains programming files. Also, a repository cannot be changed once is it committed.Step 5:​By clicking on Select repository button, you can either select an existing one or click on ➕ button to add a new repository. It will redirect you to GitHub, and you can create new repository. After creating a new repository, click on Refresh button and you can see the newly created repository in the list.Step 6:​After you select repository, you will see the GitHub repository name and URL. You can also switch repositories by clicking the Change repository button.Step 7:​To commit code to GitHub, first build app and then select Code view. The GitHub repository will be visible at the bottom of the code page. To push your application code to the GitHub repository, click Commit. You can also change the repository from here if necessary.Sync application code to GitLab​Step 1:​Go to applications settings and click on Integrations from the left panel. And select GitLab option.Step 2: When you click on the sync with GitLab button, a dialogue will appear with two options: SaaS and Self manage. To move to the next step, select any of the options and provide the necessary information.cautionTo sync application code on GitLab, you need a Personal access token. Learn more Sync GitLab Using SaaS​Choose SaaS, enter your Personal access token, and click Submit. The token will be verified when you provide the details, and you will be able to see the GitLab repository details.Sync GitLab Using Self manage​Select Self manage and enter Domain URL, Username, and Personal access token and click on Submit. After providing the information, the token will be validated and you will be able to view the GitLab repository details. The personal access token has to be of the administrator.Step 1:​When the authorization is complete, you will be returned to DhiWise application settings page. Select integration and you will be able to see the Select repository option. Please select a blank repository; you will not be able to select a repository that already contains programming files.Step 2:​By clicking on Select repository button, you can either select an existing one or click on ➕ button to add a new repository. It will redirect you to GitLab, and you can create new repository. After creating a new repository, click on Refresh button and you can see the newly created repository in the list.Step 3:​After you select repository, you will see the GitLab repository name and URL. You can also switch repositories by clicking the Change repository button.Step 4:​To commit code to GitLab, first Build app and then select Code view. The GitLab repository will be visible at the bottom of the code page. To push your application code to the GitLab repository, click Commit. You can also change the repository from here if necessary.By following the above steps, you will be able to sync the app code with GitHub or GitLab. Now the next step is to input your Vercel access token.

Got a question? Ask here."
"1720380710-4","https://docs.dhiwise.com/docs/react/intro","Ownership of the source code","https://docs.dhiwise.com/docs/react/ownership-of-the-source-code","Ownership of the source codeSelected screen code​Export pages code from your created React app in DhiWise. Learn moreDownload zip​You can easily download source code once you have build the application.Git Sync​Sync and manage your application code with GitHub or GitLab. Learn moreVS Code Extension​With the help of DhiWise's VS Code extension, developers can easily sync their application code to Visual Studio Code and start customizing app code within seconds. Learn more

Got a question? Ask here."
"1720380712-5","https://docs.dhiwise.com/docs/react/intro","Build App","https://docs.dhiwise.com/docs/react/build-app","Build AppYou can build your React application anytime after you fetch your design from Figma. If your Figma design has prototyping, then that would be auto-implemented to create actions and navigations, which you can see on the generated code file when you build the app.Build app to generate code​All the design has been generated with tailwindcss. Find all the theme related configuration inside tailwind.config.jsViteJS, CRACO, CRA or Custom Webpack​Using DhiWise, you can generate web applications from Figma in a few minutes. After generating the code, you can download the zip file and run it on your IDE.To make your developer experience more delightful, you can now generate code in four different ways:1. CRA (Create React App)​  This beginner-friendly setup helps all the newbies and all the React developers who prefer the CRA setup.
This comes with react-scripts v5.0.02. CRACO (Create React App Configuration Override)​  This is CRA with a twist for better, opinionated, faster bundling. So you can configure it, whatever works best for you.This comes with @craco/craco v^6.4.53. Webpack​  Want a custom setup for your project? Want to go old-school?   Then this is for you. Each part of this setup is designed to match your application's needs with easy configuration and minimal tweaks and is entirely customizable. Powered by Webpack.  For this, we use the following packages: ""webpack"": ""^5.74.0"",
""webpack-cli"": ""^4.10.0"",
""webpack-dev-server"": ""^4.9.3"",
  Thanks, Webpack team! 👍🏽4. ViteJS​  The next-gen front-end tooling is here for lightspeed builds.Vite brings all the fantastic features:Instant Server StartLighting Fast HMR (Hot Module Replacement)Optimized BuildsUniversal Plugins""@vitejs/plugin-react-refresh"": ""^1.3.1"",
""vite-plugin-svgr"": ""^0.3.0"",
""vite"": ""^2.3.2"",
Storybook support​All the above flavors come with storybook support. Storybook helps you start building and maintaining your applications' UI components. How to use Storybook in DhiWise-generated React web applications?Install and Initialize​     npx storybook init
Run the Storybook​      npm run storybook
Download the source code or sync it to GitHub or GitLab​You will be redirected to the code screen and from there you can download the source code and sync it to GitHub & GitLab !infoThe source code is debugged. Therefore, it can be run directly on your favorite IDE.You can still make changes to your application by adding actions, changing views, & authentication, then re-build your application. Click on ""Build app"" to generate the updated code. The basic structure of the generated code will be as following:Install Dependencies​npm install
Running the app​npm start
Folder Structure​After creation, your project should look like this:
.
├── craco.config.js
├── package.json
├── package-lock.json
├── postcss.config.js
├── public
│   ├── favicon.ico
│   ├── index.html
│   ├── logo192.png
│   ├── logo512.png
│   ├── manifest.json
│   └── robots.txt
├── README.md
├── src
│   ├── App.js/ .tsx
│   ├── assets
│   │   ├── fonts ---------- Project fonts
│   │   └── images --------- All Project Images
│   ├── components --------- UI and Detected Common Components
│   ├── constants ---------- Project constants, eg: string consts
│   ├── hooks -------------- Helpful Hooks
│   ├── index.js/ .tsx
│   ├── pages -------------- All route pages
│   ├── Routes.js/ .tsx ---------- Routing
│   ├── styles
│   │   ├── index.css ------ Other Global Styles
│   │   └── tailwind.css --- Default Tailwind modules
│   └── util
│       └── index.js/ .tsx ------- Helpful utils
└── tailwind.config.js ----- Entire theme config, colors, fonts etc.


For the project to build, **these files must exist with exact filenames**:

- `public/index.html` is the page template;
- `src/index.js` is the JavaScript entry point.


Got a question? Ask here."
"1720380715-6","https://docs.dhiwise.com/docs/react/intro","Storybook Integration","https://docs.dhiwise.com/docs/react/story-book","Storybook IntegrationStorybook creates an interface where you can visualise your React app’s components easily and play with them by modifying its properties and making changes for better design.

The supported components for Storybook are: Input, Radio, Button (LeftIconButton, RightIconButton), CheckBox, SelectArea and TextArea.Step 1:​Create a React app using DhiWise.Step 2:​Once your app is setup, click on Build App.Step 3:​A dialog box will appear for Storybook Setup, there are two options: With storybook: Code generator with StorybookWithout storybook: Code generator without StorybookStep 4:​Click on With storybook to integrate Storybook into your application. Once you click there, your project will start to build.Step 5:​Once your application is built, download your code.Step 6:​To install and initialize dependencies, run the below command:npx storybook init
Step 7:​To run Storybook use the following command:npm run storybook
Step 8:​As you run your code,Here you can see a list of common components of your application.Easily configure the Actions, Controls, and Interactions on a button, and also modify them from Canvas area.You can see in detail the properties description from Docs area.At this stage, you have successfully integrated Storybook into your React app.

Got a question? Ask here."
"1720380717-7","https://docs.dhiwise.com/docs/react/intro","Preview App","https://docs.dhiwise.com/docs/react/preview-app","Preview AppPreview your complete React app design right here to see your app’s generated design results and make changes priorly again to get your design results more accurately.As you are done with your React app design setup or want to check out the design results of screens, follow the below steps;Step 1:​Go to the pages list, and click on Preview button.Step 2:​As you click on it, it will start to build your design code, within a few minutes it will show you a page where you can check or preview your app design, as shown below;infoSwitch between different screen resolutions easily, and check how it fits on every screen.On the Preview page, you can switch between different pages and preview them live here and check each screen’s UI easily.Shareable Preview​Easily share the generated preview with your teams for your React app in DhiWise, by simply copying the generated link from here in the top right corner.

Got a question? Ask here."
"1720380719-8","https://docs.dhiwise.com/docs/react/intro","Protected Routes","https://docs.dhiwise.com/docs/react/protected-routes","Protected Routes[https://www.youtube.com/embed/qsIH0W8f9as]In a React application, a protected route is a route, which authenticated users can only access. Protected routes ensure that only authorized users can access certain application parts.Steps to create protected routes in React using DhiWise​1. Go to Pages​2. Select Protected routes from the left menu​3. Select routes to protect & click Move to protected​4. Define the local-storage key or use the existing & click Submit​About the generated code of Protected routes using DhiWise​To create a protected route in React, you can use the <Route> component from the react-router-dom library and wrap it in a higher-order component (HOC) that checks if the user is authenticated before rendering the route.Here's an example of how DhiWise generates a protected route in React:import React from ""react"";
import { Navigate, useLocation } from ""react-router-dom"";

export const ProtectedRoute = ({ element: Element }) => {
  const { pathname } = useLocation();
  const token = localStorage.getItem(""token"");

  if (!token && [""/dashboard""].includes(pathname)) {
    return <Navigate to=""/"" />;
  }
  return <Element />;
};
In this example, the ProtectedRoute component is a HOC that wraps the <Element> component and checks if the user is authenticated using the local storage key name “token”. If the user is authenticated, it renders the Element passed as a prop to the ProtectedRoute component. If the user is not authenticated, it redirects them to the “/” (default) page.To use the ProtectedRoute component, DhiWise passes it as an element prop from the <Route> component in Routes.js file:<Route path=""/dashboard"" element={<ProtectedRoute element={Dashboard} />} />
This will ensure that authenticated users can only access the /profile route.

Got a question? Ask here."
"1720380721-9","https://docs.dhiwise.com/docs/react/intro","Constants","https://docs.dhiwise.com/docs/react/constants","Constants[https://www.youtube.com/embed/t20Afrmusdk]

In React, a constant is a variable that cannot be reassigned. Constants are declared using the const keyword like this:const MY_CONSTANT = 'This is a constant.';
Once a constant is declared, you cannot reassign a new value. If you try reassigning a new value to a constant, you will get a runtime error.MY_CONSTANT = 'This is a new value'; // This will throw an error
Constants are helpful when you want to ensure that the value of a variable does not change, either by accident or intentionally. They can help prevent bugs and improve the readability of your code.tipIt's important to note that while the value of a constant cannot be reassigned, it is still possible to modify the properties of a constant object.Steps to add constants in your React application using DhiWise​1. Go to Pages​2. Click on Constant from the left menu​3. Click on Add constant​4. Enter the file name & click on Create constant to create a new file​5. Enter the constant name​6. Select constant data type & click on Save​

Got a question? Ask here."
"1720380723-10","https://docs.dhiwise.com/docs/react/intro","Manage App Lifecycle","https://docs.dhiwise.com/docs/react/manage-app-lifecycle","Manage App LifecycleThis utility helps with managing React components’ life cycle events.It supports API Integration on the On Mount event for functional React components. DhiWise-generated code will have “useEffect” calling the API function inside it.Step 1:​Go to pages Step 2:​Select a page and click on ConfigureStep 3:​From the top-left corner, select Life cycle action. And on On mount select API Integration. Learn more on how to integrate APIs.



Got a question? Ask here."
"1720380725-11","https://docs.dhiwise.com/docs/react/intro","API Integration","https://docs.dhiwise.com/docs/react/api-integration","API IntegrationAPIs play a vital role in making an application interactive. An application has to integrate a number of different APIs into it for its different functionalities to work. With DhiWise, set up these APIs easily for your application.Add APIs​To integrate APIs you require an API for your application in DhiWise, to use the same and set it up. Add APIs manually or import your Postman collection in DhiWise. referRefer: Add APIs and Environment variablesSetup APIs​infoYou can also integrate APIs in lifecycle method. Learn more.Integrate API on any page or view component easily using the following steps:Select Page​In your DhiWise application, select the page from the page list or click Configure option for a particular page, in which you want to set up an API.Select page component​Now, as you open the page in detail view, right-click on the component on which you want to integrate an API, and select Create action.Next, select API Integration from the left side of the panel. Step 1: Select API & Handle Request​Select the API you want to integrate from the list of APIs you added in your application. Then select the required header, parameter, and body. Learn more on how to add new APIs to your application.

The types of API request supported are GET, POST, PUT, and DELETE.Header and Params​Set your API’s Header, Parameters, and Body by switching to Handle request area. Headers and Parameter values will be the same as you have added to it while you add your API, in case you want to edit them you can change or add them here.Body​Switch to Body property and bind your request key with any of the below-supported types to send data to your API request,TypeDescriptionViewYou can pass data from screen view component.Manual inputThis option allows you to enter a custom value into your request bodyConstantIf you have added constant files, then you can pass the constant data to request body. Learn moreAPI responseIf you have priorly saved API response, then you can pass that response data to request body.Get from localStorageYou can pass stored value from localStorage to request body.Navigation argumentIf the current page already has a Navigation argument set up. Then you can pass that same data to request body. Learn moreStep 2: Handle Response​Save response data to localStorage or bind them with View to display the response values in your application, in the Handle response area.TypeDescriptionViewBind the API response data to the page components.LocalStorageStore the response data to your localStorage.Step 3: Handle Action​Handle and choose what to perform on the success and failure methods after the API call in Handle action area.On success and On error actions​noteWe are considering response code as 200 for success of API call rest code will be in error state.Select an action you want to execute on these methods from the actions list and set it up accordingly with the required inputs.
Actions supported on these methods are:API IntegrationNavigationShow Alert dialog
Click on Submit and your API is integrated.infoYou can integrate On error actions in the same way as shown below.On success: Navigation​On success: Show alert​

Got a question? Ask here."
"1720380727-12","https://docs.dhiwise.com/docs/react/intro","Add APIs and Environment Variables","https://docs.dhiwise.com/docs/react/add-apis-and-enviroment-variables","Add APIs and Environment Variables[https://www.youtube.com/embed/X-Ot_vZRidg]

Easily add APIs manually or upload Postman collection to integrate API in your app. Go to your React app builder, on page list select API management from the left menu. Here, you can Add new API, Delete or Edit an existing one.To add a new one, click on Add new API.Two ways to add APIs​1. Upload Postman file​Upload the API Postman collection & environment file to get the list of all the APIs from the Postman file.2. Create APIs manually​[https://www.youtube.com/embed/T1y1s9M9Gzw]Add APIs manually by clicking on the Add new API button. It will redirect you to the API runner page.Step 1:​Select the API method from the top-left and enter the URL. Below is the list of methods that are supported;MethodDescriptionPUTPUT method creates or updates a specified resourceGETGET method retrieves information from a specified resourceDELETEDELETE method deletes the specified resourcePOSTPOST request is used to send data to a server to create/update a resourceinfoIf Headers and Params are already set into the Postman collection for an API then it will be auto-set here.Step 2:​The next step is to add Header, Params, and Body;HeaderAdd header configuration by setting key valuesParamsAdd query parameters and sample valuesBodyAdd/bind API request body
Send API request: Once you Send the request. You will get the response and the API will be auto-saved for you. To send request click on Send or use shortcut Ctrl + G.
JSON: Your API response will be formatted into JSON, which will be visible from here.Raw: The raw API data which you got from the API response is available here.Headers: The headers from the API response are stored here.infoShow code: Get code for your API by clicking on Send -> Show code or simply use shortcut S. You can select from a range of languages available.Import cURL: Import API from cURL by clicking on Send -> Import cURL or simply use shortcut CAdd Environment Variables​The environment variable Global comes as default. However, you can always create new variables. In the environment variable, you can add variables and its value as shown in the below GIF.To use those variables in the URL simply use curly braces {{variable_name}}Once you've built the app follow the TODO in your source code to change to different environment variables.

Got a question? Ask here."
"1720380730-13","https://docs.dhiwise.com/docs/react/intro","Custom Components","https://docs.dhiwise.com/docs/react/create-custom-components","Custom ComponentsDeprecatedThe words; ""Custom component"" and ""Change component"" are no longer present. The features have been renamed and combined with the ""Component"" feature. This ensures that all existing features remain in place. Custom component is now renamed to ""Create new component"" and ""Change component"" is renamed to ""Convert to existing component"". To learn more, visit the Component page.[https://www.youtube.com/embed/HaJV9IWAvI0]Writing all your HTML parts on one page creates chaos in modularising the code. As front-end developers, we often focus on creating common UI parts then can be used repeatedly.If you’re familiar with Thinking in React, we often break the UI into a common hierarchy. That helps us conveniently handle each UI. In addition, this approach allows us to achieve the single responsibility principle in the codebase.Using DhiWise, you can define your UI part as a custom component with a few simple steps visually. On top of that, it also allows us to define the props, which can be set dynamically from the parent.How to create custom components​Step 1: Right click on the UI part from the canvas and select “Create Component”​
Step 2: Define the name of the shared component​We define the name of a custom component in React the same way we need to define the name over here.Step 3: Set props in the layer​DhiWise will automatically identify all the props based on text and images in the UI part and ask you to define them as a prop for the shared component, which can be passed from the parent component.Step 4: Define all the props and click on Create Component button​
Step 5: Choose similar tag-matched components​Once you define a single view to be a custom component, DhiWise intelligently brings all the tag-matched components and internally, it will replace all those HTML repetitions into a custom component, including the dynamic prop values.infoThis works only when you have similar components in the same page.Step 6: Get all the similar views converted into a custom component​You can observe the custom component in the layer tree and the canvas and side panel, which you can update anytime.Remove Custom Components​Components let you split the UI into independent, reusable pieces, and think about each piece in isolation. For the same, DhiWise provides the feature of Custom Components. Custom components are created once and can be used multiple times in different business contexts.DhiWise makes the usage of these Custom Components handier with respect to the changing requirements. Using DhiWise, you can add and remove components from the Custom Component.How to remove a component from Custom Components​Step 1:  Right-click on the component that’s a part of a Custom Component on the canvas and select “Custom Component → Remove as component”.​Step 2: Select “Remove as component” to ensure removing that component.​Effects on code:​Removing a component means removing a component from the Custom Component. On removing a component from the Custom Component, you get a standalone piece of code from DhiWise for that particular component.Only the component that’s removed from the Custom Component will be removed while the other selected components will still be a part of the Custom Component. For example,<FoodComponent
        className=""bg-white_A700 flex flex-col items-center justify-start""
        restroName=""Fast Food Resto""
        foodName=""Fish Burger""
      />
      <div className=""bg-white_A700 flex flex-col items-center justify-start"">
        <Img
          src=""images/img_love.svg""
          className=""sm:h-[10px] md:h-[13px] h-[24px] max-w-[100%]""
          alt=""Love One""
        />
        <Text
          className=""font-medium ml-[3px] text-bluegray_900 text-left w-[auto]""
          as=""h5""
          variant=""h5""
        >
          Fast Food Resto
        </Text>
        <Button className=""items-center justify-center "">
          <Img
            src=""images/img_button.svg""
            className=""flex items-center justify-center""
            alt=""button Two""
          />
        </Button>
      </div>

      <FoodComponent
        className=""bg-white_A700 flex flex-col items-center justify-start""
        restroName=""Fast Food Resto""
        foodName=""Cheese Burger""
      />
Choose and map from existing components​The goal of developing custom components is to maximize the reusability of existing code and eliminate duplicate code. DhiWise lets you create as many custom components as you like and change any of them at any moment, including props.Once you've developed the necessary component on one page, you may need to reuse it on other pages. In general, we do not create a custom component for the same UI across several pages. This leads to the ""Write Everything Twice"" idea. It decreases code readability and causes issues in large-scale systems.To address this, we offer functionality that allows you to select and map an existing custom component that meets all of the requirements and contributes to the ""Don't Repeat Yourself"" technique.How to map a UI to an existing Custom Component​Step 1: Right-click on the UI part from the canvas and select “Create Component → Create Custom Component”.​Step 2: Select an existing Custom Component and set the required props. Click on the “Create Component” button to add the component to a Custom Component.​Common Actions in Custom Components​While creating a React application, we often use custom components. These custom components are often used for purposes like UI or actions.For the UI part, you can refer to creating custom components.Now, setting up an action into a custom component is available. This will allow you to reduce the time for manually assigning the same action to each part of custom components.E.g. You want to assign back navigation to a button of a custom component. Similarly, you want the same for all the buttons of all such custom components.To make this process easy, except for the API Integration, you can assign a similar action to all those occurrences. For this, you will get two options:Only current page: It will apply to all the custom components of the current page only.All the pages: It will apply to all the custom components of all the pages of the application.How to set up common actions for custom components​All the steps to assign a common action to all the custom components is the same and similar to the normal action setup.Step 1:​Right-click on the element.Step 2:​Select Create action.Step 3:​Choose an action. noteExcept API Integration, you can assign action as a common action to all the components.Step 4:​It will show you a popup as below. Choose any of your choices and proceed.

Got a question? Ask here."
"1720380732-14","https://docs.dhiwise.com/docs/react/intro","Social Authentication","https://docs.dhiwise.com/docs/react/social-authentication","Social AuthenticationSocial media authentication allows users to access the app without going through the tedious process of account registration. When you setup a specific social media, for example login on the login page, you will be redirected to the login page of that social media, and with the help of that credentials you will be able to login into the app in DhiWise easily without efforts.Select the componentRight click on the component and click on Create Action.From the list of actions, select Authentication.The pop-up shows supported integrations for Social Authentication and click Save. You can integrate Google authentication within a single click.

Got a question? Ask here."
"1720380734-15","https://docs.dhiwise.com/docs/react/intro","Navigation","https://docs.dhiwise.com/docs/react/navigation","NavigationNavigation makes applications more interactive, which helps users navigate in, out, and across the app. Add all such navigation to your React app in a few simple steps by following the below steps.Add Navigation​Step 1:​Select the page from the page list on which you want to add the navigation action.Step 2:​Next, go to the view component you want to add navigation to and right click on the component and click on Create Action.Step 3:​From the list of actions, select Navigation.Step 4:​Next, you will have to select the type of Navigation, from the below supported types;TypeDescriptionPage navigationNavigate to a specifically selected page from the application’s page listURL navigationProvide an external link and navigate to itPage Section navigationNavigate to a specifically selected section of the pageStep 5:​If you are selecting Page Navigation you will have to select a page to navigate, select it from the drop down.Navigation with arguments​Share data between two pages, in a few simple steps, while navigating from one page to the other.Step 1:​Firstly select the page to which you want to navigate and then click on Add Arguments + here you need to Enter key which will be passed as an argument. The key is used as a name for an argument to declare it in your code.Step 2:​Next you need to select the type of argument you want to bind with navigation from the following:TypeDescriptionManual inputThis option allows you to enter a custom value into your navigation argument.API responseIf your current page has API integrated which is receiving data in response that you can share that data to the page you're navigating to via API response. Learn moreNavigation argumentIf the current page already has a Navigation argument set up. Then you can pass that same data to the page you're navigating to.ConstantIf you have added constant files, then you can pass the constant data to the page you are navigating to. Learn moreStep 3:​If we go with API response you will be asked to Select API from the APIs integrated on the current page.Learn more on how to add new APIs to your application.

Step 4:​Next, you need to Select API response from the selected API. Choose the response key to bind with your argument from the list, and click Save. However, you can also bind multiple keys in your argument. Back navigation​Navigate back to the previously visited pages of your application using back navigation.Step 1:​Select the page from the page list on which you want to add the navigation action.Step 2:​Next, go to the view component you want to add navigation to and right click on the component and click on Create Action.Step 3​From the list of actions, select Back Navigation.

Got a question? Ask here."
"1720380736-16","https://docs.dhiwise.com/docs/react/intro","Open Modal","https://docs.dhiwise.com/docs/react/open-modal","Open ModalSet up Open Modal action to webpage components.A Modal is any type of box that is displayed on top of your page. To integrate a modal design on your page use the Open Modal action. ExampleOn many sites especially on blogs or news sites we get a pop up display that ask us to input our email to sign up for newsletters and such. Select Button componentRight click on the component and select Create actionSelect Open Modal action and Choose ModalinfoThe Open Modal design should be present in Figma.

Got a question? Ask here."
"1720380738-17","https://docs.dhiwise.com/docs/react/intro","Create Action","https://docs.dhiwise.com/docs/react/create-action","Create ActionConfigure the actions that design components (Buttons) preforms e.g. Navigation & more.What is action​A website has multiple components, many of which perform some action e.g. Button, Slider, & more. The Create action configures which action those components will perform. It can be Navigation, Authentication, or any other.Below are the types of actions you can set up on your web page components.NavigationOpen modalSocial AuthenticationAPI IntegrationCommon Actions in Components​Learn more on how to setup common actions for components.

Got a question? Ask here."
"1720380740-18","https://docs.dhiwise.com/docs/react/intro","Change Component","https://docs.dhiwise.com/docs/react/change-component","Change ComponentDeprecatedThe words; ""Custom component"" and ""Change component"" are no longer present. The features have been renamed and combined with the ""Component"" feature. This ensures that all existing features remain in place. Custom component is now renamed to ""Create new component"" and ""Change component"" is renamed to ""Convert to existing component"". To learn more, visit the Component page.After fetching your design, DhiWise identifies all the components in your webpage. The identified components can be checked under the layout tree. You can click on any component and change component type from the component list that we support. ExampleFor example, if a component is unidentified or misidentified then with this feature its view type can be changed e.g. from an Input to a Button.We support the change component feature for the below components:Column InputsForm InputsSlider InputsRow | Chart | List | SearchView | TextImage | CircleImage | Stack | Grid | Line | Header | Footer | GoogleMap | TabButton | Input | Radio | Radio Group | CheckBox | Dropdown | DatePicker | TextAreaSlider | Previous control | Next control | Page indicator
Below are the few examples of change component:Change Text to Link​Convert Text to the Link component by following the below steps.Select Text elementRight-click and select Change ComponentSelect LinkEnter the valid URL -> ContinueChange component to Chart​If your web page has images of Charts, then convert them into real Charts following the below steps.Pick a component to convertSelect Change componentSelect ChartSelect Chart typeLine | Bar | Pie | Scatter | Area | Radar | Bubble | Candlestick | Doughnut | Composed | Sankey | Treemap | Funnel | RadialbarSelect a libraryrecharts | nivo | victory | react-chart-js-2 | react-google-chartsConfigure the Chart viewApply legendApply tinyApply tooltipSelect the group typeNo. of data set - Input the no. of data set you requireSelect layout type - Vertical or HorizontalChange component to Slider​Convert a list component in your webpage into a Slider. You require a list and two arrow-like images from the list to move forward & backward.  Select the component to convertSelect Change componentSelect the Slider typeSelect the page indicators -> SaveChange component to Tab​The Tab design on your webpage may be identified as a row component. However, you can convert it to a Tab by following the below steps:Select Tab DesignSelect Change componentSelect TabPick any Tab content from the current webpage.Change component to Input​The Input field on your webpage may be identified as a row. Therefore, convert it to the Input component by following the below steps. Select Input designSelect Change ComponentSelect InputClick Convert to InputChange component to Table​Once the design is fetched, DhiWise automatically detects all the components. Also, DhiWise offers the freedom to change the components as and when required. The hierarchy of components can be seen in the Layout Tree tab. The detected components can be changed to any of the components that are supported by DhiWise. A component can be easily converted to a table component with just a few clicks.Step 1:  Right-click on the component from the canvas that’s to be converted and select “Change Component”.​Step 2: Select the “Table” component.​Step 3: Select Table Header from the UI.​Step 4: Select Table Data from the UI.​More about Table component:​DhiWise uses @tanstack/react-table (v8) for the table component. TanStack Table is a Headless UI library for building powerful tables & datagrids.Following is the generated code for the table component.const MenuListPage = () => {
  const tableData = React.useRef([
    {
      newGroup: ""#465692316"",
      newGroup1: ""(Review 4.5 )"",
      newGroup2: ""6957X"",
      newGroup3: ""In Stock"",
      newGroup4: ""$56.12"",
    },
  ]);
  const columnHelper = createColumnHelper();
  const column = [
    columnHelper.accessor(""newGroup"", {
      cell: (info) => (
        <Text
          className=""font-medium md:mt-[0] sm:mt-[0] my-[12px] pl-[0] py-[0] text-gray_700 text-left""
          variant=""body2""
        >
          {info?.getValue()}
        </Text>
      ),
      header: (info) => (
        <div className=""flex flex-row min-w-[190px] md:w-[100%] sm:w-[100%] w-[18%]"">
          <Text
            className=""font-medium text-gray_700 text-left w-[auto]""
            variant=""body2""
          >
            Product ID
          </Text>
        </div>
      ),
    }),
  ];
}


Got a question? Ask here."
"1720380743-19","https://docs.dhiwise.com/docs/react/intro","Sync Design Changes","https://docs.dhiwise.com/docs/react/sync-design-changes","Sync Design ChangesWith the Sync design changes feature, you don’t have to keep going back to look at your Figma designs or create a new app in DhiWise every time you change your design. Just with the help of a click, you can see all the updates right away. No need to switch to the design file for it; we have it all covered right here.cautionThe Sync design changes feature doesn’t work with templates.noteHere are a couple of things to remember when you work with Figma and DhiWise:Before syncing your design changes from the Figma design file to DhiWise, if you had applied any Styles from DhiWise, those styles will be preserved after the sync.If you create your own component in DhiWise, your changes will not be affected when you sync design updates. To revert to the original content from the Figma design file, you must first remove your custom component. Learn how to do this here, and then you can re-sync the design changes.How to sync design changes from Figma design file?​Step 1:​Click Configure for the desired screen.On the top-left, look for the Sync design changes button, located just beside the screen name. When you click on it, you will see two options as follows:   Only current screen: Use this option to resync the design changes of the current screen only.   All the screens: Use this option to resync the design changes of the entire application.Click the option of your choice, and the process will start.Step 2:​If you choose the All the screens option, the system will begin fetching the design changes from your Figma file. It will display all the newly added screens, existing screens, and any that have been removed, allowing you to manage them easily. Simply select or deselect screens as needed and click Fetch screens.tipYou can also sync from Dashboard, look for the Screen settings button, which you’ll find next to the Search screen option. Click on Screen Settings, and from there, you can easily resync your whole application."
"1720380745-20","https://docs.dhiwise.com/docs/react/intro","Components","https://docs.dhiwise.com/docs/react/components","ComponentsWriting all your HTML parts on one page creates chaos in modularising the code. As front-end developers, we often focus on creating common UI parts that can be used repeatedly.If you’re familiar with Thinking in React, we often break the UI into a common hierarchy. That helps us conveniently handle each UI. In addition, this approach allows us to achieve the single responsibility principle in the codebase.DhiWise auto-identifies screen components and generates a complete code for the same. Generally, it auto-detects the components, but sometimes due to design changes, it may not able to identify them.To get the missing component identified, you can map it with any existing component or can create new component at your own.Using DhiWise, you can define your UI part as a component with a few simple steps visually. On top of that, it also allows us to define the props, which can be set dynamically from the parent.Create a new component​1: Select the UI part​Right-click on the UI part, hover over Component and select Create new component.2: Define the name of the component​Just as we define the name of a component in React; the same way we need to define the name here.3: Set props in the layer​DhiWise will automatically identify all the props based on text and images in the UI part and ask you to define prop name for the component to generate source code with better readability when you build the app. 4: Finish creating a component​Define all the props and click on Create Component to create a component. Once you define a single view to be a component, DhiWise intelligently brings all the tag-matched components and internally, it will replace all those HTML repetitions into a component, including the dynamic prop values. This lets you select similar tag-matched components that you wish to convert.5: Check all the similar views converted into a component​You can observe the component in the layer tree, the UI and the side panel, which you can update anytime. It will be highlighted as Violet color.Choose and map from the existing components​The goal of developing components is to maximize the reusability of existing code and eliminate duplicate code. DhiWise lets you create as many components as you like and change any of them at any moment, including props.Once you've developed the necessary component on one page, you may need to reuse it on other pages. In general, we do not create a component for the same UI across several pages. This leads to the ""Write Everything Twice"" idea. It decreases code readability and causes issues in large-scale systems.To address this, we offer functionality that allows you to select and map an existing component that meets all of the requirements and contributes to the ""Don't Repeat Yourself"" technique.1: Convert to existing component​Right-click on the component, hover over Component and select Convert to existing component.2: Select your component​Component selection here provides you the flexibility to select a component that’s created by you as well as the UI components supported by DhiWise.To convert your component to an existing DhiWise-supported component, select the component to which you want to convert.To convert your component to your created existing component, select your component. This will show you what your current and existing components look like and seek your confirmation to proceed further.cautionEditing a component is only possible when it is a complete (100%) match. If the component is converted to an existing component which is not a complete match, then you will be unable to modify the component name or properties.DhiWise will ask for confirmation before you convert to an existing component which is not a 100% match.View Components​Components that are created can be viewed while converting them to existing components that is one can even view the components that they’ve created. 1: Select the Component​Right-click on the component, hover over Component, and select Convert to existing component2: Click 👁  to view​To View a component, click 👁  button on the component. This opens up the component view and lists the created actions.Edit your component​Many times, you may require to edit the component name or prop name. You can edit them any time from DhiWise. This saves a lot of time renaming components and their prop all over the application source code.1: Select the Component​Right-click on the component, hover over Component, and select Edit component.2: Update the Component​Make the required changes and click on Update component to finish editing.Detaching Components​DhiWise helps you convert UI parts into React components, increasing code readability, reusability and modularity.To understand the detach component, we must first know about the UI parts.What is the UI part?​The UI part is an HTML & TailwindCSS code DhiWise generates for web pages.Reference: https://react.dev/learn/thinking-in-reactDetaching a component means removing that particular piece of code instance as a React component and putting it back as a UI part. Doing so will eliminate the readability, reusability and modularity of that code.1: Select the Component​Right-click on the component to be detached from the UI, hover over Component and select Detach component2: Select “Detach component” to ensure removing that component​Effects of detaching on code​Detaching a component means removing it as a component and not completely deleting it from the source code or UI. On detaching a component, you get a standalone piece of code and in other words “JSX” code from DhiWise for that particular component.Only the detached component will not be a component any longer, keeping other components as it is.For example,<div className=""justify-center min-h-[auto] w-[100%]"">
  <div className=""items-center justify-center p-[30px] w-[100%]"">
    <Img
      src=""images/img_pngitem5290903.webp""
      className=""h-[270px] md:h-[auto] mt-[6px] object-cover w-[270px]""
      alt=""PngItem5290903""
    />
    <div className=""flex flex-col items-center justify-end mb-[6px] w-[100%]"">
      <div className=""flex flex-col gap-[23px] items-center justify-start w-[100%]"">
        <Text
          className=""font-semibold text-gray_900 text-left w-[auto]""
          as=""h6""
          variant=""h6""
        >
          Spaghetti
        </Text>
        <Text
          className=""leading-[200.00%] not-italic text-center text-gray_800 w-[100%]""
          variant=""body7""
        >
          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Egestas
          consequat mi eget auctor aliquam, diam.{"" ""}
        </Text>
      </div>
      <div className=""flex items-center justify-center mt-[14px] rounded-[1.76px] w-[49%]"">
        <RatingBar
          className=""""
          value={5}
          starCount={5}
          activeColor=""#f54748""
          size={24}
        ></RatingBar>
      </div>
      <div className=""flex flex-row gap-[34px] items-center justify-between w-[95%]"">
        <Text
          className=""font-semibold text-gray_900 text-left w-[auto]""
          variant=""body1""
        >
          $12.05
        </Text>
        <Button
          className=""text-center text-white_A700 w-[auto]""
          onClick={() => navigate(""/checkout"")}
        >
          Order now
        </Button>
      </div>
    </div>
  </div>
  <FoodComponent className=""bg-white_A700 flex flex-1 flex-col items-center justify-center p-[30px] sm:px-[20px] rounded-[40px] w-[100%]"" />
  <FoodComponent className=""bg-white_A700 flex flex-1 flex-col items-center justify-center p-[30px] sm:px-[20px] rounded-[40px] w-[100%]"" />
</div>;
Common Actions in  Components​While creating a React application, we often use components. These components are often used for purposes like UI or actions.For the UI part, you can refer to creating components.Now, setting up an action into a component is available. This will allow you to reduce the time for manually assigning the same action to each part of the components.E.g. You want to assign back navigation to a button of a component. Similarly, you want the same for all the buttons of all such components.To make this process easy, except for the API Integration, you can assign a similar action to all those occurrences. For this, you will get two options:Only current page: It will apply to all the components of the current page only.All the pages: It will apply to all the components of all the pages of the application.Set up common actions for components​All the steps to assign a common action to all the components is the same and similar to the normal action setup.Step 1:​Right-click on the element/component.Step 2:​Select Create action.Step 3:​Choose an action.Step 4:​It will show you a popup as below. Choose any of your choices and proceed.Figma Component to React Components​Figma Components are reusable design elements in Figma that enable designers to generate a master version of a design element that can then be used to create instances of the component. Because these instances are linked to the master component, any changes to the master component have an impact on all of the instances. Figma Components aid design teams by ensuring design uniformity and making it easy to upgrade and maintain a design system.DhiWise automatically converts those components into a React Component when you create a React app, importing your Figma design into DhiWise.Effect on Code​If you have some elements of the UI, which are not part of every similar component you tag in Figma, DhiWise will consider those data optional. In the generated code that part will render conditionally.Get React component automatically​Open your Figma design, and select the design you want to convert. Right-click on the element, and click Create component.Or, Press Option ⌥ + Command ⌘ + K for Macintosh or Alt + Ctrl + K for WindowsOr, as an alternative, you can perform the same in the Layers view.Your component will look something like this. The Violet highlight indicates the component.Once you’re done with this. Go to DhiWise and Create a React app using your Figma design.In DhiWise, you can find your Figma components with the same color indicating the React components.View all your components​Open your application and you will see the following screen. Select the Components tabs.You will get this screen where you can see all the components auto-identified by DhiWise based on your Figma design and Figma components that you had created manually in the Figma file.You can observe the number of times and a number of files the components are used in.Customize auto-identified components​With this feature, you can edit the component name as well as props which are passed from the parent component to the child component.Right-click on the component and select Component -> Edit component.You can edit prop name and component name which will reflect on the generated code after building the app.Detach an auto-identified Figma component​Right-click on the component and select Component → Detach component.Effect on code​Detaching a component states dismantling it as a component without removing it entirely from the source code or UI. When you detach a component, you obtain a standalone piece of code, or ""JSX"" code, from DhiWise for that specific component.Only the detached component will no longer be a component, leaving the other components unchanged.

Got a question? Ask here."
"1720380747-21","https://docs.dhiwise.com/docs/react/intro","Smart Editor","https://docs.dhiwise.com/docs/react/smart-editor","Smart EditorCustomize your application UI with Smart Editor, where you can easily edit and modify all UI changes while having real-time design previews, which helps you make UI more adaptive, responsive, pixel-perfect and accurate and also avoids switching back to your page list to rename or change page by providing you all your necessities right here, while you create your application.Continue below to know how it helps in customising your UI design and get familiar with Smart Editor.How does it work​To open the Smart Editor, select a page from the page list for which you want to customize UI. Click on Configure or select the card.Get familiar with Smart Editor​This section will help you to get the Smart Editor interface and will guide you on how it helps to customize your complete app UI.Complete hierarchical view of the components identified & generated automatically by DhiWise.1Build dynamic web apps with Navigations, API Integrations, Modals, Social Authentication and much more...2Handle life-cycle events starting from useEffect when the component is mounted.3Create components with desired prop names and remove duplications/repetitions4Combine elements into a Row/Column or ungroup them with a few clicks5Design a responsive web app that looks awesome on all devices with a better experience.6Define the look and feel of a web page as you want. Visually.7Write once and reuse groups of CSS properties across the web app.8You can see the live preview of your application or share that link with everyone in one go.9Build your React app in a combination of with/without storybook and CRA, CRACO, Webpack & Vite.10You can switch between all your application pages by opening this dropdown. Of course, you can search a page as well.11You can rename the page name with a single click right here.12Go back to where all the pages of the application are.13
1. Layout TreeComplete hierarchical view of the components identified & generated automatically by DhiWise. Learn more2. Create ActionsBuild dynamic web apps with Navigations, API Integrations, Modals, Social Authentication and much more. Learn more3. Life-cycle eventsHandle life-cycle events starting from useEffect when the component is mounted. Learn more4. ComponentsCreate components with desired prop names and remove duplications/repetitions. Learn more5. Group/UngroupCombine elements into a Row/Column or ungroup them with a few clicks. Learn more6. Supported devicesDesign a responsive web app that looks awesome on all devices with a better experience. Learn more7. StylesVisually, define the look and feel of a web page as you want. Learn more8. MixinsWrite once and reuse groups of CSS properties across the web app. Learn more

Got a question? Ask here."
"1720380749-22","https://docs.dhiwise.com/docs/react/intro","Edit and Configuration","https://docs.dhiwise.com/docs/react/edit-and-configure-pages/","Edit and ConfigurationThis document explains the features and function of the pages.Pages​The Pages are the core of the React web app. In pages, developers can customize UI components like changing text to button, or map out actions like navigation to different pages, and setting up Google authentication.infoFiles fetched from Figma are displayed in pages. infoIt might take a few minutes to fetch details of your Figma file on pages when creating a new app.Set homepage​The home screen is the first screen that appears when the app launches. It prepares the ground for your application while giving your app enough time to load.Step 1:​On the page list, click on the Settings ⚙️ available in the right corner.Step 2:​There you will have an option to set your Homescreen. Simply click on Change beside the Homescreen option and a dialog box will appear where you need to select a home page from the screens listed and click on Save & Close to save the selected page as your app’s Home screen. Change name​Set an appropriate name for your page for better code readability. Export page​The Export page allows you to generate the code for only selected pages. This way you can quickly get the UI code of your design and integrate it into your existing project. Learn moreSync design from Figma​The complete Figma design is available on Pages. However, if any changes are made to the original Figma file in the Figma account, then developers need to click on the refresh icon 🔄 to update those changes.After sync design from Figma, the app design is updated. However, the integrated actions may be lost if the entire page is updated or any design component is modified.

Got a question? Ask here."
"1720380753-23","https://docs.dhiwise.com/docs/react/intro","Real-time rendering","https://docs.dhiwise.com/docs/react/real-time-rendering","Real-time renderingtipAlso, following the DhiWise recommended Figma design guidelines will give you more accurate code, resulting in a faster web development experience with DhiWise.Using the Auto layout feature in Figma while designing the pages will result in accurate UI & responsiveness on the web pages.(What You See Is What You Get)DhiWise comes up with one more power-packed feature that can boost the developer experience and productivity by 10x.Real-time rendering allows making UI-related CSS changes right from the browser.The new real-time rendering is built on top of the “Preview” feature that allows viewing a preview of your application.Earlier, for the React application, you could see the live preview of a React web application with a click. Now you can make changes in real-time, and you can see the changes just after you do the changes without any wait.Device-specific rendering in real-time​In DhiWise, you get three real-time rendering devices. For Mobile​For Tablet​For Desktop​For any React application, you can now edit your web page design for all above mentioned three devices.With DhiWise, you get the result of each change in the output panel within milliseconds.You get the result immediately, whether a Display change or a Typography change. Moreover, it helps you get the same UI when downloading the code from DhiWise.

Got a question? Ask here."
